{"version":3,"sources":["components/TableRow.js","components/TableCell.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["TableRow","style","rowStyle","this","props","cells","Component","border","height","width","TableCell","handleClick","setState","color","state","bgcolor","onClick","cellStyle","Table","handleAddRow","rols","handleRemoveRow","handleAddColumn","cols","handleRemoveColumn","handleSelectColor","event","target","value","table","i","columns","j","push","onChange","marginLeft","marginRight","createTable","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAGMA,E,uKAGE,OACI,wBAAKC,MAAOC,GACPC,KAAKC,MAAMC,W,GALLC,aAWjBJ,EAAW,CACbK,OAAQ,kBACRC,OAAQ,OACRC,MAAO,QAGIT,IClBTU,E,kDACF,WAAYN,GAAO,IAAD,8BACd,cAAMA,IAOVO,YAAc,WAEV,EAAKC,SAAS,CAAEC,MAAO,EAAKT,MAAMS,SARlC,EAAKC,MAAO,CAERD,MAAO,IAJG,E,qDAed,OACI,wBAAKE,QAASZ,KAAKW,MAAMD,MAAOG,QAASb,KAAKQ,YAAaV,MAAOgB,Q,GAjBtDX,aAsBlBW,EAAY,CACdV,OAAQ,kBACRC,OAAQ,OACRC,MAAO,QAIIC,ICiDAQ,E,kDA3EX,WAAYd,GAAO,IAAD,8BACd,cAAMA,IAuBVe,aAAe,WACX,EAAKP,SAAS,CAAEQ,KAAM,EAAKN,MAAMM,KAAO,KAzB1B,EA4BlBC,gBAAkB,WACd,EAAKT,SAAS,CAAEQ,KAAM,EAAKN,MAAMM,KAAO,KA7B1B,EAgClBE,gBAAkB,WACd,EAAKV,SAAS,CAAEW,KAAM,EAAKT,MAAMS,KAAO,KAjC1B,EAoClBC,mBAAqB,WACjB,EAAKZ,SAAS,CAAEW,KAAM,EAAKT,MAAMS,KAAO,KArC1B,EAyClBE,kBAAoB,SAACC,GACjB,EAAKd,SAAS,CAAEC,MAAOa,EAAMC,OAAOC,SAxCpC,EAAKd,MAAO,CACRD,MAAO,GACPU,KAAM,EACNH,KAAM,GALI,E,wDASNA,EAAMG,GAGd,IAFA,IAAIM,EAAQ,GAEJC,EAAI,EAAGA,EAAIV,EAAMU,IAAI,CAGzB,IAFA,IAAIC,EAAU,GAENC,EAAI,EAAGA,EAAIT,EAAMS,IACrBD,EAAQE,KAAK,kBAAC,EAAD,CAAYpB,MAAOV,KAAKW,MAAMD,SAE/CgB,EAAMI,KAAK,kBAAC,EAAD,CAAW5B,MAAO0B,EAASlB,MAAOV,KAAKW,MAAMD,SAG5D,OAAOgB,I,+BA0BP,OACI,oCACI,6BACI,4BAAQb,QAASb,KAAKgB,cAAtB,aACA,4BAAQH,QAASb,KAAKmB,iBAAtB,gBACA,4BAAQN,QAASb,KAAKkB,iBAAtB,gBACA,4BAAQL,QAASb,KAAKqB,oBAAtB,mBACA,4BAAQU,SAAU/B,KAAKsB,mBACnB,4BAAQG,MAAM,IAAd,gBACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,YAGR,2BAAQ3B,MAAO,CAAEkC,WAAY,OAAQC,YAAa,SAC9C,+BACKjC,KAAKkC,YAAYlC,KAAKW,MAAMM,KAAMjB,KAAKW,MAAMS,a,GAnElDjB,aCULgC,G,6KARX,OACE,yBAAKC,UAAU,OACX,kBAAC,EAAD,W,GAJQjC,cCQEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a8c936fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass TableRow extends Component{\r\n\r\n    render(){\r\n        return (\r\n            <tr  style={rowStyle}>\r\n                {this.props.cells}\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nconst rowStyle = {\r\n    border: \"1px solid black\",\r\n    height: \"30px\",\r\n    width: \"30px\",\r\n  };\r\n\r\nexport default TableRow;","import React, { Component } from 'react';\r\n\r\nclass TableCell extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            //key: props.key,\r\n            color: \"\",\r\n        }\r\n    }\r\n\r\n    handleClick = () =>\r\n    {\r\n        this.setState({ color: this.props.color });\r\n    }\r\n    \r\n    render()\r\n    {\r\n        return (\r\n            <td  bgcolor={this.state.color} onClick={this.handleClick} style={cellStyle}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst cellStyle = {\r\n    border: \"1px solid black\",\r\n    height: \"30px\",\r\n    width: \"30px\",\r\n  };\r\n\r\n\r\nexport default TableCell;","import React, { Component } from 'react';\r\nimport TableRow from \"./TableRow\";\r\nimport TableCell from \"./TableCell\";\r\n\r\nclass Table extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            color: \"\",\r\n            cols: 5,\r\n            rols: 2,\r\n        }\r\n    }\r\n\r\n    createTable(rols, cols){\r\n        let table = [];\r\n\r\n        for(let i = 0; i < rols; i++){\r\n            let columns = [];\r\n\r\n            for(let j = 0; j < cols; j++){\r\n                columns.push(<TableCell  color={this.state.color} />);\r\n            }\r\n            table.push(<TableRow  cells={columns} color={this.state.color} />);\r\n        }\r\n\r\n        return table;\r\n    }\r\n\r\n    handleAddRow = () =>{\r\n        this.setState({ rols: this.state.rols + 1 });\r\n    };\r\n\r\n    handleRemoveRow = () =>{\r\n        this.setState({ rols: this.state.rols - 1 });\r\n    };\r\n\r\n    handleAddColumn = () =>{\r\n        this.setState({ cols: this.state.cols + 1 });\r\n    };\r\n\r\n    handleRemoveColumn = () =>{\r\n        this.setState({ cols: this.state.cols - 1 });\r\n    };\r\n\r\n\r\n    handleSelectColor = (event) =>{\r\n        this.setState({ color: event.target.value });\r\n    };\r\n    \r\n\r\n    render(){\r\n        return (\r\n            <>\r\n                <div>\r\n                    <button onClick={this.handleAddRow}>Add a Row</button>\r\n                    <button onClick={this.handleAddColumn}>Add a Column</button>\r\n                    <button onClick={this.handleRemoveRow}>Remove a row</button>\r\n                    <button onClick={this.handleRemoveColumn}>Remove a Column</button>\r\n                    <select onChange={this.handleSelectColor}>\r\n                        <option value=\"\">Select color</option>\r\n                        <option value=\"red\">Red</option>\r\n                        <option value=\"orange\">Orange</option>\r\n                        <option value=\"yellow\">Yellow</option>\r\n                        <option value=\"green\">Green</option>\r\n                        <option value=\"blue\">Blue</option>\r\n                        <option value=\"purple\">Purple</option>\r\n                    </select>\r\n                </div>\r\n                <table  style={{ marginLeft: \"auto\", marginRight: \"auto\"}}>\r\n                    <tbody>\r\n                        {this.createTable(this.state.rols, this.state.cols)}\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Table;","import React, { Component } from \"react\";\nimport Table from \"./components/Table\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <Table />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}